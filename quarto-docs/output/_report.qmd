---
title: "RAP Self Assessment Report"
format: 
  html:
    theme: [default, styles.scss]
    title-block-banner: true
    template-partials: title-block.html
    logo: SG-logo.jpg
    toc: true
    toc-depth: 2
    toc-location: left
    toc-title: "Contents"
    anchor-sections: false
    smooth-scroll: true
embed-resources: true
execute:
  echo: false
params:
  metadata: NA
---

```{r echo = FALSE, include = FALSE}

# NOTE: This document is rendered within a temp directory created by the
# download_report module. Other files required to render this document are
# copied to this temp directory and so file paths in this file are relative 
# to this temp directory. 

library(dplyr)
library(readr)
library(tidyr)
library(gt)
library(janitor)
library(ggplot2)
library(sgplot)
library(purrr)
library(knitr)
library(htmltools)

source("level_label.R")
source("details.R")

input_data <- read_rds("input.rds")
levels <- read_rds("levels.rds")
options <- read_rds("options.rds")

criteria_list <- input_data |> pull(criteria, name = id)
```

This report was produced using the [Scottish Government RAP Self Assessment tool](https://scotland.shinyapps.io/sg-rap-self-assessment/).

```{r, echo = FALSE, include = FALSE}
level_summary <-
  input_data |>
  select(level, status) |> 
  mutate(n = 1) |>
  complete(level, status = as.character(options), fill = list(n = 0)) |>
  pivot_wider(names_from = status, names_expand = TRUE,
              values_from = n, values_fn = sum, values_fill = 0) |>
  rowwise() |>
  mutate(n_criteria = sum(c_across(!level))) |>
  ungroup() |>
  mutate(
    all_criteria = yes == n_criteria & n_criteria > 0,
    level_met = accumulate(all_criteria, all),
    perc_met = yes / n_criteria,
    perc_in_progress = progress / n_criteria
  )

max_level <- ifelse(
  any(level_summary$level_met),
  level_summary |> filter(level_met) |> pull(level) |> max(),
  NA
)

level_met_text <- ifelse(
  is.na(max_level),
  paste("Working towards", 
        level_label(min(levels), levels)),
  level_label(max_level, levels)
)
```

## Summary & Progress

**Project name**: `r params$metadata$name`

**Project lead**: `r params$metadata$lead`

**Project team members**: `r params$metadata$members`

**Report produced**: `r format(lubridate::today(), "%d %B %Y")`

**RAP Level**: `r level_met_text`

```{r, echo = FALSE, dev = "svg", fig.align = "center", fig.width = mm_to_inch(220), fig.height = mm_to_inch(130), fig.alt = ""}
chart_data <- 
  level_summary |>
  select(level, perc_met, perc_in_progress, all_criteria, level_met) %>%
  mutate(level = factor(level,
                        rev(levels),
                        label = rev(level_label(level, levels))))

chart_data %>%
  pivot_longer(cols = starts_with("perc"),
               names_to = "status",
               values_to = "perc") %>%
  mutate(status = factor(status, 
                         levels = c("perc_in_progress", "perc_met"))) %>%
  ggplot(aes(y = level)) +
  geom_col(data = chart_data, aes(x = 1),
           fill = "white",
           colour = sg_colour_values["dark-blue"]) +
  geom_col(aes(x = perc, fill = status),
           colour = sg_colour_values["dark-blue"]) +
  scale_fill_discrete_sg(
    reverse = TRUE,
    guide = guide_legend(reverse = TRUE),
    labels = c("perc_met" = "Criteria Met", 
               "perc_in_progress" = "Criteria in progress")) +
  scale_x_continuous(labels = scales::percent) +
  theme_sg(base_size = 14, legend = "bottom") +
  labs(x = "Percentage of criteria", y = NULL, fill = NULL)
```

<br>

```{r, echo = FALSE}
level_summary |>
  select(level, all_of(options), perc_met) |>
  mutate(level = level_label(level, levels)) |>
  gt() |>
  tab_spanner(
    label = "Number of criteria",
    columns = any_of(names(options))
  ) |>
  cols_label(level = "RAP Level",
             perc_met = "Percentage of criteria met") |>
  fmt_percent(perc_met, decimals = 0) |>
  tab_options(table.align = "left",
              table.width = pct(100)) |>
  tab_style(
    style = list(cell_text(weight = "bold")),
    locations = list(cells_column_labels(), 
                     cells_column_spanners(),
                     cells_body(columns = level))
  )
```

<!-- ## Assessment by Level  -->

```{r, echo = FALSE, results = "asis"}
out <- 
  map(
    unique(input_data$level),
    function(x) {
      knit_child("_level-progress.qmd", 
                 envir = environment(), 
                 quiet = TRUE)
    }
  )

cat(unlist(out), sep = "\n")
```