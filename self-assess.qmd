---
title: "Scottish Government RAP Self Assessment"
format:
  html:
    theme: [default, styles.scss]
    toc: true
    toc-location: left
    toc-depth: 2
    toc-title: "Contents"
    anchor-sections: false
    smooth-scroll: true
embed-resources: true
server: shiny
---

This tool is a prototype for analysts in the Scottish Government to self-assess their progress in developing [Reproducible Analytical Pipelines](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/).

    
```{r setup, include = FALSE}
#| context: setup

# Load packages
library(shiny)
library(dplyr)
library(tidyr)
library(here)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(knitr)

# Load Shiny modules
walk(list.files("modules", ".R$", full.names = TRUE), source)

# Read in criteria list
criteria <- read_csv(here("data", "criteria.csv"), show_col_types = FALSE) |>
   mutate(id = paste0("id_", str_replace(id, "\\.", "_")))

# Check help text available for all criteria
if(any(!criteria$id %in% str_extract(list.files(here("quarto-docs", "help")), 
                                     "id_\\d+_\\d+"))) {
   stop("All IDs in `data/criteria.csv` must have a corresponding file in ", 
        "`quarto-docs/help/`.")
}

#criteria_list <- criteria |> pull(criteria, name = id)

# Read in lookup data
all_options <- read_rds(here("data", "options.rds"))
all_levels  <- read_rds(here("data", "levels.rds"))

opts_knit$set(root.dir = here())

```


## About your project

```{r}
metadata_ui("metadata")
```


<!-- Criteria assessments -->

```{r, results = "asis", warning = FALSE}
out <- map(
   all_levels,
   function(level) {
      knit_child(here("quarto-docs", "_level-form.qmd"),
                 envir = environment(),
                 quiet = TRUE)
   }
)

cat(unlist(out), sep = "\n")
```


## Download report

```{r sidebar-ui}
tagList(
   download_report_ui("report"),
   download_csv_ui("csv")
)
```


```{r server}
#| context: server

form_responses <- map(
   set_names(unique(criteria$id)),
   ~ possibly(callModule)(form_server, .x)
)

data_output <- reactive({
   
   form_responses <- map_dfr(form_responses, ~ .x(), .id = "id")
   
   criteria |>
      left_join(form_responses, by = "id") |>
      mutate(
         status = replace_na(status, "not_assessed"),
         status_label = case_when(
            status == "not_assessed" ~ "Not assessed",
            TRUE ~ names(all_options)[match(status, all_options)]
         )
      )
   
})

metadata <- callModule(metadata_server, "metadata")

callModule(download_csv_server, "csv", data_output)

callModule(download_report_server, "report", data_output, metadata)
```
