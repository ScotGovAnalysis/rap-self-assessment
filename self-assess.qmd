---
title: "Scottish Government RAP Self Assessment"
format:
  html:
    page-layout: custom
    theme: [default, styles.scss]
embed-resources: true
server: shiny
---

This tool is a prototype for analysts in the Scottish Government to self-assess their progress in developing [Reproducible Analytical Pipelines](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/).

    
```{r setup, include = FALSE}
#| context: setup

library(shiny)
library(dplyr)
library(tidyr)
library(here)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(knitr)

walk(list.files("modules", ".R$", full.names = TRUE), source)

criteria <- read_csv(here("criteria.csv"), show_col_types = FALSE) |>
   mutate(id = paste0("id_", str_replace(id, "\\.", "_")))

# Check help text available for all criteria
if(any(!criteria$id %in% str_extract(list.files("help"), "id_\\d+_\\d+"))) {
   stop("All IDs in `criteria.csv` must have a corresponding file in `help/`.")
}

criteria_list <- criteria |> pull(criteria, name = id)

options <- c(`Complete` = "yes", 
             `In progress` = "progress", 
             `Not started` = "no",
             `Not assessed` = "not_assessed")

levels <- c(`Aspiring` = 0,
            `Fundamental` = 1,
            `Intermediate` = 2,
            `Advanced` = 3)
```

::: {.panel-sidebar}
```{r sidebar-ui}
sidebarPanel(
   metadata_ui("metadata"),
   br(),
   download_report_ui("report"),
   br(),
   br(),
   download_csv_ui("csv")
)
```
:::

::: {.panel-center}

```{r, results='asis'}
form <- map(
   levels,
   function(x) {
      c(
         paste("##", level_label(x, levels)),
         map_chr(
            criteria |> filter(level == x) |> pull(id),
            function(y) {
               criteria_id <- y
               knit_child("_criteria.qmd",
                          envir = environment(),
                          quiet = TRUE)
            }
         )
      )
   }
)

cat(unlist(form), sep="\n")
```

:::

```{r server}
#| context: server

form_response <- map(
   set_names(unique(criteria$id)),
   ~ possibly(callModule)(form_server, .x)
)

data_output <- reactive({
   
   values <-
      map_dfr(form_response, ~ .x()) |>
      pivot_longer(everything(), names_to = "id", values_to = "status")
   
   criteria |>
      left_join(values, by = "id") |>
      mutate(
         status = replace_na(status, "not_assessed"),
         status_label = case_when(
            status == "not_assessed" ~ "Not assessed",
            TRUE ~ names(options)[match(status, options)]
         )
      )
   
})

metadata <- callModule(metadata_server, "metadata")

callModule(download_csv_server, "csv", data_output)

callModule(download_report_server, "report", data_output, levels, options, metadata)
```
