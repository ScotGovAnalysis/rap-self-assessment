---
title: "RAP Self Assessment"
format:
  html:
    theme: [default, styles.scss]
    title-block-banner: true
    template-partials: partials/title-block.html
    logo: images/SG-logo.jpg
    toc: true
    toc-depth: 2
    toc-location: left
    toc-title: "Contents"
    anchor-sections: false
    smooth-scroll: true
    header-includes: |
      <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
embed-resources: true
server: shiny
---

## About this tool {.intro-h2}

This tool is for analysts in the Scottish Government developing [Reproducible Analytical Pipelines](https://analysisfunction.civilservice.gov.uk/support/reproducible-analytical-pipelines/). It aims to help analysts identify both areas of success and potential improvements.

There are four levels of RAP maturity:

* Aspiring

* Fundamental

* Intermediate

* Advanced

### How to complete the self assessment {.intro-h3}

Mark the criteria in each level as 'Complete', 'In progress' or 'Not started'. It isn't essential to provide a marking for all criteria. 

Next, download a report to see what level of RAP maturity you are currently working at. You can also download a csv file containing your self assessment markings. Note that the tool doesn't store any data, so make sure to download a report or csv to save for future reference. 

You can use your report to:

* understand where you are already following RAP principles

* understand what RAP principles you should focus on next

It might be useful to complete this self assessment every few months to track progress and prioritise next steps.

### Feedback {.intro-h3}

This is a new tool and we would welcome any feedback you have. Please [file an issue on GitHub](https://github.com/ScotGovAnalysis/rap-self-assessment/issues) or [get in touch via email](mailto:alice.byers@gov.scot;thomas.wilson@gov.scot?subject=RAP%20Self-Assessment%20Feedback).


```{r setup, include = FALSE}
#| context: setup

# Load packages
library(shiny)
library(dplyr)
library(tidyr)
library(here)
library(readr)
library(purrr)
library(tibble)
library(stringr)
library(knitr)

# Load Shiny modules
walk(list.files("modules", ".R$", full.names = TRUE), source)

# Read in criteria list
criteria <- read_rds(here("data", "criteria.rds"))

# Check help text available for all criteria
if(any(!criteria$id %in% str_extract(list.files(here("quarto-docs", "help")), 
                                     "id_\\d+_\\d+"))) {
   stop("All IDs in `data/criteria.rds` must have a corresponding file in ", 
        "`quarto-docs/help/`.")
}

# Read in lookup data
all_options <- read_rds(here("data", "options.rds"))
all_levels  <- read_rds(here("data", "levels.rds"))

# Set project directory as root when using knit_child
opts_knit$set(root.dir = here())
```


## About your project

```{r metadata}
metadata_ui("metadata")
```


<!-- Criteria assessments -->

```{r form, results = "asis", warning = FALSE}
out <- map(
   all_levels,
   function(level) {
      knit_child(here("quarto-docs", "_level-form.qmd"),
                 envir = environment(),
                 quiet = TRUE)
   }
)

cat(unlist(out), sep = "\n")
```


## Download report

```{r download}
tagList(
   download_report_ui("report"),
   download_csv_ui("csv")
)
```


<!-- Further support -->

```{r support, results = "asis", warning = FALSE}
cat(knit_child(here("quarto-docs", "_further-support.qmd"),
                 envir = environment(),
                 quiet = TRUE))
```


<!-- Shiny server -->

```{r server}
#| context: server

form_responses <- map(
   set_names(unique(criteria$id)),
   ~ possibly(callModule)(form_server, .x)
)

data_output <- reactive({
   
   form_responses <- map_dfr(form_responses, ~ .x(), .id = "id")
   
   criteria |>
      left_join(form_responses, by = "id") |>
      mutate(
         status = replace_na(status, "not_assessed"),
         status_label = case_when(
            status == "not_assessed" ~ "Not assessed",
            TRUE ~ names(all_options)[match(status, all_options)]
         )
      )
   
})

metadata <- callModule(metadata_server, "metadata")

callModule(download_csv_server, "csv", data_output)

callModule(download_report_server, "report", data_output, metadata)
```
